<robot name="simple4wheeler" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <xacro:property name="pi" value="3.1415926535897931" />
    <xacro:property name="wheel_radius" value="0.1" />
    <xacro:property name="wheel_width" value="0.04" />
    <xacro:property name="chassis_length" value="0.5" />
    <xacro:property name="chassis_width" value="0.3" />
    <xacro:property name="chassis_height" value="0.07" />
    
    <!-- Base Links -->
    <link name="map"/>
    
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="3"/>
            <inertia ixx="0.03954" ixy="0" ixz="0" iyy="0.10620" iyz="0" izz="0.10620"/>
        </inertial>
    </link>

    <joint name="base_joint" type="fixed">
        <parent link="map"/>
        <child link="base_link"/>
        <origin xyz="0 0 0.1" rpy="0 0 0"/>
    </joint>

    <!-- Wheels -->
    <xacro:macro name="wheel" params="prefix x y">
    <link name="${prefix}_wheel">
        <visual>
        <origin xyz="0 0 0" rpy="1.5708 0 0"/> <!-- ← Rotate 90° around X -->
        <geometry>
            <cylinder length="0.02" radius="0.1"/>
        </geometry>
        <material name="black"/>
        </visual>
        <collision>
        <origin xyz="0 0 0" rpy="1.5708 0 0"/> <!-- ← Same rotation here -->
        <geometry>
            <cylinder length="0.02" radius="0.1"/>
        </geometry>
        </collision>
        <inertial>
        <mass value="0.5"/>
        <origin xyz="0 0 0" rpy="1.5708 0 0"/> <!-- ← Same here -->
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                iyy="0.001" iyz="0.0"
                izz="0.001"/>
        </inertial>
    </link>

    <joint name="${prefix}_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="${prefix}_wheel"/>
        <origin xyz="${x} ${y} 0" rpy="0 0 0"/>
        <axis xyz="0 1 0"/> <!-- Correct rolling axis -->
    </joint>
    </xacro:macro>


    <!-- Front steering wheels -->
<xacro:macro name="steering_wheel" params="prefix x y">
  <!-- Steering Pivot -->
  <link name="${prefix}_steering">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="0.01"/>
      </geometry>
      <material name="gray"/>
    </visual>
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>

  <!-- Wheel Link (rotated cylinder) -->
  <link name="${prefix}_wheel">
    <visual>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/> <!-- Rotate wheel -->
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
      <material name="black"/>
    </visual>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>

  <!-- Joint to steer wheel (Z axis) -->
  <joint name="${prefix}_steering_joint" type="continuous">
    <parent link="base_link"/>
    <child link="${prefix}_steering"/>
    <origin xyz="${x} ${y} 0" rpy="0 0 0"/>
    <axis xyz="0 0 1"/>
  </joint>

  <!-- Joint to spin the wheel (Y axis relative to steering) -->
  <joint name="${prefix}_wheel_joint" type="continuous">
    <parent link="${prefix}_steering"/>
    <child link="${prefix}_wheel"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>
</xacro:macro>


    <!-- Create wheels -->
    <xacro:wheel prefix="left_back" x="-0.2" y="0.15"/>
    <xacro:wheel prefix="right_back" x="-0.2" y="-0.15"/>
    <xacro:steering_wheel prefix="left_front" x="0.2" y="0.15"/>
    <xacro:steering_wheel prefix="right_front" x="0.2" y="-0.15"/>

    <!-- Lidar -->
    <link name="lidar">
        <visual>
            <geometry>
                <mesh filename="package://simple4wheeler/model/rplidar_a2_simple.stl"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <box size="0.07 0.07 0.07"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="0.1"/>
            <inertia ixx="0.00001" ixy="0" ixz="0" iyy="0.00001" iyz="0" izz="0.00001"/>
        </inertial>
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="base_link"/>
        <child link="lidar"/>
        <origin xyz="0 0 0.17" rpy="0 0 0"/>
    </joint>

    <gazebo reference="lidar">
        <sensor type="ray" name="lidar_sensor">
            <pose>0 0 0 0 0 0</pose>
            <visualize>true</visualize>
            <update_rate>10</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>400</samples>
                        <resolution>1</resolution>
                        <min_angle>-${pi}</min_angle>
                        <max_angle>${pi}</max_angle>
                    </horizontal>
                    <vertical>
                        <samples>1</samples>
                        <resolution>1</resolution>
                        <min_angle>-0.05</min_angle>
                        <max_angle>0.05</max_angle>
                    </vertical>
                </scan>
                <range>
                    <min>0.15</min>
                    <max>12.0</max>
                    <resolution>0.01</resolution>
                </range>
            </ray>
            <plugin name="lidar_controller" filename="libgazebo_ros_laser.so">
                <topicName>/scan</topicName>
                <frameName>lidar</frameName>
            </plugin>
        </sensor>
    </gazebo>

    <!-- Camera -->
    <link name="camera">
        <visual>
            <geometry>
                <box size="0.05 0.05 0.05"/>
            </geometry>
        </visual>
        <inertial>
            <mass value="0.1"/>
            <inertia ixx="0.00001" ixy="0" ixz="0" iyy="0.00001" iyz="0" izz="0.00001"/>
        </inertial>
    </link>

    <joint name="camera_joint" type="fixed">
        <parent link="base_link"/>
        <child link="camera"/>
        <origin xyz="0.2 0 0.15" rpy="0 0 0"/>
    </joint>

    <gazebo reference="camera">
        <sensor type="camera" name="camera_sensor">
            <update_rate>30</update_rate>
            <camera name="front_camera">
                <horizontal_fov>1.3962634</horizontal_fov>
                <image>
                    <width>640</width>
                    <height>480</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.1</near>
                    <far>100</far>
                </clip>
            </camera>
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <cameraName>camera</cameraName>
                <imageTopicName>image_raw</imageTopicName>
                <cameraInfoTopicName>camera_info</cameraInfoTopicName>
                <frameName>camera</frameName>
                <hackBaseline>0.07</hackBaseline>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
            </plugin>
        </sensor>
    </gazebo>

    <!-- Ultrasonic Sensors -->
    <xacro:macro name="ultrasonic_sensor" params="name x y z yaw">
        <link name="${name}_ultrasonic">
            <visual>
                <geometry>
                    <cylinder radius="0.01" length="0.02"/>
                </geometry>
                <origin rpy="0 ${pi/2} 0" xyz="0 0 0"/>
            </visual>
        </link>
        
        <joint name="${name}_ultrasonic_joint" type="fixed">
            <parent link="base_link"/>
            <child link="${name}_ultrasonic"/>
            <origin xyz="${x} ${y} ${z}" rpy="0 0 ${yaw}"/>
        </joint>
        
        <gazebo reference="${name}_ultrasonic">
            <sensor type="ray" name="${name}_sensor">
                <pose>0 0 0 0 0 0</pose>
                <visualize>true</visualize>
                <update_rate>10</update_rate>
                <ray>
                    <scan>
                        <horizontal>
                            <samples>5</samples>
                            <resolution>1</resolution>
                            <min_angle>-0.1</min_angle>
                            <max_angle>0.1</max_angle>
                        </horizontal>
                        <vertical>
                            <samples>5</samples>
                            <resolution>1</resolution>
                            <min_angle>-0.1</min_angle>
                            <max_angle>0.1</max_angle>
                        </vertical>
                    </scan>
                    <range>
                        <min>0.02</min>
                        <max>4.0</max>
                        <resolution>0.01</resolution>
                    </range>
                </ray>
                <plugin name="${name}_controller" filename="libgazebo_ros_range.so">
                    <topicName>${name}/range</topicName>
                    <frameName>${name}_ultrasonic</frameName>
                    <radiation>ultrasound</radiation>
                    <fov>0.2</fov>
                    <minRange>0.02</minRange>
                    <maxRange>4.0</maxRange>
                </plugin>
            </sensor>
        </gazebo>
    </xacro:macro>

    <!-- Place ultrasonic sensors around the robot -->
    <xacro:ultrasonic_sensor name="front" x="0.25" y="0" z="0.1" yaw="0"/>
    <xacro:ultrasonic_sensor name="back" x="-0.25" y="0" z="0.1" yaw="${pi}"/>
    <xacro:ultrasonic_sensor name="left" x="0" y="0.175" z="0.1" yaw="${pi/2}"/>
    <xacro:ultrasonic_sensor name="right" x="0" y="-0.175" z="0.1" yaw="-${pi/2}"/>
    <xacro:ultrasonic_sensor name="front_left" x="0.2" y="0.15" z="0.1" yaw="${pi/4}"/>
    <xacro:ultrasonic_sensor name="front_right" x="0.2" y="-0.15" z="0.1" yaw="-${pi/4}"/>
    <xacro:ultrasonic_sensor name="back_left" x="-0.2" y="0.15" z="0.1" yaw="${3*pi/4}"/>
    <xacro:ultrasonic_sensor name="back_right" x="-0.2" y="-0.15" z="0.1" yaw="-${3*pi/4}"/>

    <!-- Gazebo Plugins -->
    <gazebo>
        <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
            <updateRate>100</updateRate>
            <robotNamespace>/</robotNamespace>
            <leftFrontJoint>left_front_wheel_joint</leftFrontJoint>
            <rightFrontJoint>right_front_wheel_joint</rightFrontJoint>
            <leftRearJoint>left_back_wheel_joint</leftRearJoint>
            <rightRearJoint>right_back_wheel_joint</rightRearJoint>
            <wheelSeparation>0.3</wheelSeparation>
            <wheelDiameter>${2*wheel_radius}</wheelDiameter>
            <robotBaseFrame>base_link</robotBaseFrame>
            <torque>20</torque>
            <topicName>cmd_vel</topicName>
            <broadcastTF>true</broadcastTF>
            <odometryTopic>odom</odometryTopic>
            <odometryFrame>odom</odometryFrame>
        </plugin>
        
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo>
</robot>